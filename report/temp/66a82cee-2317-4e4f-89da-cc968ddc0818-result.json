{"name": "异常新增用户校验", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_debug_api.TestDebugApi object at 0x0000024E1DC564D0>\nbase_info = {'api_name': '新增用户', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}, 'method': 'POST', 'url': '/dar/user/addUser'}\ntestcase = {'data': {'dates': '2023-07-21 23:55:15', 'password': 'tset6789890', 'phone': 13800000000, 'role_id': 123456789, ...}}\n\n    @allure.story(next(c_id) + \"新增用户\")\n    # 测试用例执行顺序设置\n    @pytest.mark.run(order=1)\n    # 参数化，yaml数据驱动\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/publicApi/addUser.yaml\"))\n    def test_add_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\publicApi\\test_debug_api.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:119: in specification_yaml\n    raise e\nbase\\apiutil.py:116: in specification_yaml\n    raise e\nbase\\apiutil.py:110: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x0000024E1DC53850>\nexpected = [{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]\nresponse = {'error_code': None, 'msg': '新增成功', 'msg_code': 200}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言最终封装方法\n        :param expected: 预期结果，也就是yaml文件里面的validation字段的值\n        :param response: 接口的实际返回结果\n        :param status_code: 接口的实际返回状态码\n        :return:\n        \"\"\"\n        # 0表示接口测试成功，非0则表示接口测试失败\n        all_flag = 0\n        try:\n            logs.info(f'yaml文件的预期结果：{expected}')\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == 'contains':\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'eq':\n                        flag = self.equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        pass\n                    else:\n                        logs.error(f'不支持{key}这种断言模式！')\n        except Exception as e:\n            logs.error('请检查断言字段是否包含在接口的返回值中')\n            logs.error(f'异常信息：{e}')\n            raise e\n    \n        if all_flag == 0:\n            logs.info('测试成功')\n            assert True\n        else:\n            logs.error('测试失败')\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:113: AssertionError"}, "attachments": [{"name": "接口名称：新增用户", "source": "d48b0709-9b97-4878-a310-4f8184329c0c-attachment.txt", "type": "text/plain"}, {"name": "接口地址：http://127.0.0.1:8787/dar/user/addUser", "source": "ffab1631-1cb5-475b-a081-e1f677d2b54d-attachment.txt", "type": "text/plain"}, {"name": "请求方法：POST", "source": "0a3f7519-8f8d-4ec4-8128-f235e1758197-attachment.txt", "type": "text/plain"}, {"name": "请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}", "source": "9408de2b-3e99-455e-850d-54becea4b7f8-attachment.txt", "type": "text/plain"}, {"name": "测试用例名称：异常新增用户校验", "source": "0f541b00-54f6-499e-9085-bee88a6abf85-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "af761808-7454-4910-916d-ff01d9e30f45-attachment.txt", "type": "text/plain"}, {"name": "接口返回信息：{\n  \"error_code\": null,\n  \"msg\": \"新增成功\",\n  \"msg_code\": 200\n}\n", "source": "312dd1ee-f66c-4862-9b37-b87bab795589-attachment.txt", "type": "text/plain"}, {"name": "响应文本断言结果：失败", "source": "5c2fa86a-5f49-4b62-bece-36ed2eebb391-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "f099feb8-c164-416a-abb1-88bf52aa5159-attachment.txt", "type": "text/plain"}], "start": 1689954915964, "stop": 1689954915978, "uuid": "6aa71644-6ccc-4ad7-811e-bd23f9495035", "historyId": "3b30297ea482f0a1d79b593f1f8c9da1", "testCaseId": "260dfbad24ce5047b0b31911e3cb351c", "fullName": "testcase.publicApi.test_debug_api#test_add_user", "labels": [{"name": "story", "value": "C06_新增用户"}, {"name": "feature", "value": "M03_公用接口，供调试使用"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "testcase.publicApi"}, {"name": "suite", "value": "test_debug_api"}, {"name": "subSuite", "value": "TestDebugApi"}, {"name": "host", "value": "LAPTOP-TE955IAO"}, {"name": "thread", "value": "14700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.publicApi.test_debug_api"}]}